apiVersion: v1
kind: Namespace
metadata:
  name: chip
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: chip
  name: chip
  namespace: chip
spec:
  replicas: 3
  selector:
    matchLabels:
      app: chip
  template:
    metadata:       
      labels:
        app: chip
        name: chip
        version: v1
    spec:

      # Topology Spread da zona de disponibilidade
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "topology.kubernetes.io/zone"
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: chip

        - maxSkew: 1
          topologyKey: "node.kubernetes.io/instance-type"
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: chip

      containers:
      - name: chip
        image: fidelissauro/chip:v1
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
        startupProbe:
          failureThreshold: 10
          httpGet:
            path: /readiness
            port: 8080
          periodSeconds: 10
        livenessProbe:
          failureThreshold: 10
          httpGet:
            httpHeaders:
            - name: Custom-Header
              value: Awesome
            path: /liveness
            port: 8080
          periodSeconds: 10
        env:
        - name: CHAOS_MONKEY_ENABLED
          value: "false"  
        - name: CHAOS_MONKEY_MODE
          value: "critical" 
        - name: CHAOS_MONKEY_LATENCY
          value: "true"            
        - name: CHAOS_MONKEY_EXCEPTION
          value: "true"   
        - name: CHAOS_MONKEY_APP_KILLER
          value: "true"   
        - name: CHAOS_MONKEY_MEMORY
          value: "true"                                        
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: chip
  namespace: chip
  labels:
    app.kubernetes.io/name: chip
    app.kubernetes.io/instance: chip
spec:
  ports:
  - name: web
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: chip
  type: LoadBalancer
--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chip-ingress
  namespace: chip
  annotations:
    alb.ingress.kubernetes.io/scheme: "internet-facing" 
    alb.ingress.kubernetes.io/subnets:   "subnet-0be2da4a9716bccaf,subnet-05245be7a2569f921,subnet-08c689e88af8331d9"
    alb.ingress.kubernetes.io/target-type: "ip" 
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]' 
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:181560427716:certificate/ee28a5d1-4f32-4ca6-b782-71ac36e1edba" 
    alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-2016-08" 
    alb.ingress.kubernetes.io/healthcheck-path: "/liveness"
    alb.ingress.kubernetes.io/healthcheck-port: "traffic-port" 
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP" 
  labels:
    app.kubernetes.io/name: chip
spec:
  ingressClassName: alb
  rules:
    - host: chip.msfidelis.com.br 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: chip
                port:
                  number: 8080